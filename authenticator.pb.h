// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authenticator.proto

#ifndef PROTOBUF_INCLUDED_authenticator_2eproto
#define PROTOBUF_INCLUDED_authenticator_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_authenticator_2eproto 

namespace protobuf_authenticator_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_authenticator_2eproto
namespace bftmessages {
class Authenticator;
class AuthenticatorDefaultTypeInternal;
extern AuthenticatorDefaultTypeInternal _Authenticator_default_instance_;
}  // namespace bftmessages
namespace google {
namespace protobuf {
template<> ::bftmessages::Authenticator* Arena::CreateMaybeMessage<::bftmessages::Authenticator>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bftmessages {

enum SigType {
  PKSig = 0,
  MAC = 1,
  SigType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SigType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SigType_IsValid(int value);
const SigType SigType_MIN = PKSig;
const SigType SigType_MAX = MAC;
const int SigType_ARRAYSIZE = SigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigType_descriptor();
inline const ::std::string& SigType_Name(SigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigType_descriptor(), value);
}
inline bool SigType_Parse(
    const ::std::string& name, SigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigType>(
    SigType_descriptor(), name, value);
}
// ===================================================================

class Authenticator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.Authenticator) */ {
 public:
  Authenticator();
  virtual ~Authenticator();

  Authenticator(const Authenticator& from);

  inline Authenticator& operator=(const Authenticator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Authenticator(Authenticator&& from) noexcept
    : Authenticator() {
    *this = ::std::move(from);
  }

  inline Authenticator& operator=(Authenticator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Authenticator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Authenticator* internal_default_instance() {
    return reinterpret_cast<const Authenticator*>(
               &_Authenticator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Authenticator* other);
  friend void swap(Authenticator& a, Authenticator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Authenticator* New() const final {
    return CreateMaybeMessage<Authenticator>(NULL);
  }

  Authenticator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Authenticator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Authenticator& from);
  void MergeFrom(const Authenticator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authenticator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sig = 3;
  void clear_sig();
  static const int kSigFieldNumber = 3;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // int32 fromNodeId = 1;
  void clear_fromnodeid();
  static const int kFromNodeIdFieldNumber = 1;
  ::google::protobuf::int32 fromnodeid() const;
  void set_fromnodeid(::google::protobuf::int32 value);

  // int32 toNodeId = 2;
  void clear_tonodeid();
  static const int kToNodeIdFieldNumber = 2;
  ::google::protobuf::int32 tonodeid() const;
  void set_tonodeid(::google::protobuf::int32 value);

  // .bftmessages.SigType sigType = 4;
  void clear_sigtype();
  static const int kSigTypeFieldNumber = 4;
  ::bftmessages::SigType sigtype() const;
  void set_sigtype(::bftmessages::SigType value);

  // @@protoc_insertion_point(class_scope:bftmessages.Authenticator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::google::protobuf::int32 fromnodeid_;
  ::google::protobuf::int32 tonodeid_;
  int sigtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authenticator_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Authenticator

// int32 fromNodeId = 1;
inline void Authenticator::clear_fromnodeid() {
  fromnodeid_ = 0;
}
inline ::google::protobuf::int32 Authenticator::fromnodeid() const {
  // @@protoc_insertion_point(field_get:bftmessages.Authenticator.fromNodeId)
  return fromnodeid_;
}
inline void Authenticator::set_fromnodeid(::google::protobuf::int32 value) {
  
  fromnodeid_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.Authenticator.fromNodeId)
}

// int32 toNodeId = 2;
inline void Authenticator::clear_tonodeid() {
  tonodeid_ = 0;
}
inline ::google::protobuf::int32 Authenticator::tonodeid() const {
  // @@protoc_insertion_point(field_get:bftmessages.Authenticator.toNodeId)
  return tonodeid_;
}
inline void Authenticator::set_tonodeid(::google::protobuf::int32 value) {
  
  tonodeid_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.Authenticator.toNodeId)
}

// bytes sig = 3;
inline void Authenticator::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticator::sig() const {
  // @@protoc_insertion_point(field_get:bftmessages.Authenticator.sig)
  return sig_.GetNoArena();
}
inline void Authenticator::set_sig(const ::std::string& value) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.Authenticator.sig)
}
#if LANG_CXX11
inline void Authenticator::set_sig(::std::string&& value) {
  
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.Authenticator.sig)
}
#endif
inline void Authenticator::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.Authenticator.sig)
}
inline void Authenticator::set_sig(const void* value, size_t size) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.Authenticator.sig)
}
inline ::std::string* Authenticator::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.Authenticator.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticator::release_sig() {
  // @@protoc_insertion_point(field_release:bftmessages.Authenticator.sig)
  
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticator::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.Authenticator.sig)
}

// .bftmessages.SigType sigType = 4;
inline void Authenticator::clear_sigtype() {
  sigtype_ = 0;
}
inline ::bftmessages::SigType Authenticator::sigtype() const {
  // @@protoc_insertion_point(field_get:bftmessages.Authenticator.sigType)
  return static_cast< ::bftmessages::SigType >(sigtype_);
}
inline void Authenticator::set_sigtype(::bftmessages::SigType value) {
  
  sigtype_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.Authenticator.sigType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bftmessages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bftmessages::SigType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftmessages::SigType>() {
  return ::bftmessages::SigType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_authenticator_2eproto
