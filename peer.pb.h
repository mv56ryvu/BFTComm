// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer.proto

#ifndef PROTOBUF_INCLUDED_peer_2eproto
#define PROTOBUF_INCLUDED_peer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "authenticator.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2eproto 

namespace protobuf_peer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_peer_2eproto
namespace bftmessages {
class CertificateMessage;
class CertificateMessageDefaultTypeInternal;
extern CertificateMessageDefaultTypeInternal _CertificateMessage_default_instance_;
class ConfigMessage;
class ConfigMessageDefaultTypeInternal;
extern ConfigMessageDefaultTypeInternal _ConfigMessage_default_instance_;
class PayloadNewConfig;
class PayloadNewConfigDefaultTypeInternal;
extern PayloadNewConfigDefaultTypeInternal _PayloadNewConfig_default_instance_;
class PayloadSyncState;
class PayloadSyncStateDefaultTypeInternal;
extern PayloadSyncStateDefaultTypeInternal _PayloadSyncState_default_instance_;
class PeerMessage;
class PeerMessageDefaultTypeInternal;
extern PeerMessageDefaultTypeInternal _PeerMessage_default_instance_;
class ReceivedMessage;
class ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class SendMessage;
class SendMessageDefaultTypeInternal;
extern SendMessageDefaultTypeInternal _SendMessage_default_instance_;
}  // namespace bftmessages
namespace google {
namespace protobuf {
template<> ::bftmessages::CertificateMessage* Arena::CreateMaybeMessage<::bftmessages::CertificateMessage>(Arena*);
template<> ::bftmessages::ConfigMessage* Arena::CreateMaybeMessage<::bftmessages::ConfigMessage>(Arena*);
template<> ::bftmessages::PayloadNewConfig* Arena::CreateMaybeMessage<::bftmessages::PayloadNewConfig>(Arena*);
template<> ::bftmessages::PayloadSyncState* Arena::CreateMaybeMessage<::bftmessages::PayloadSyncState>(Arena*);
template<> ::bftmessages::PeerMessage* Arena::CreateMaybeMessage<::bftmessages::PeerMessage>(Arena*);
template<> ::bftmessages::ReceivedMessage* Arena::CreateMaybeMessage<::bftmessages::ReceivedMessage>(Arena*);
template<> ::bftmessages::SendMessage* Arena::CreateMaybeMessage<::bftmessages::SendMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bftmessages {

enum MsgType {
  ClientRequest = 0,
  ClientResponse = 1,
  PrePrepare = 2,
  Prepare = 3,
  Commit = 4,
  Checkpoint = 5,
  Probe = 6,
  ProbeAck = 7,
  NewConfig = 8,
  SyncState = 9,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = ClientRequest;
const MsgType MsgType_MAX = SyncState;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum ReceivedChannel {
  Client = 0,
  Peer = 1,
  Coord = 2,
  ReceivedChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReceivedChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReceivedChannel_IsValid(int value);
const ReceivedChannel ReceivedChannel_MIN = Client;
const ReceivedChannel ReceivedChannel_MAX = Coord;
const int ReceivedChannel_ARRAYSIZE = ReceivedChannel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReceivedChannel_descriptor();
inline const ::std::string& ReceivedChannel_Name(ReceivedChannel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReceivedChannel_descriptor(), value);
}
inline bool ReceivedChannel_Parse(
    const ::std::string& name, ReceivedChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReceivedChannel>(
    ReceivedChannel_descriptor(), name, value);
}
// ===================================================================

class PeerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.PeerMessage) */ {
 public:
  PeerMessage();
  virtual ~PeerMessage();

  PeerMessage(const PeerMessage& from);

  inline PeerMessage& operator=(const PeerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerMessage(PeerMessage&& from) noexcept
    : PeerMessage() {
    *this = ::std::move(from);
  }

  inline PeerMessage& operator=(PeerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerMessage* internal_default_instance() {
    return reinterpret_cast<const PeerMessage*>(
               &_PeerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PeerMessage* other);
  friend void swap(PeerMessage& a, PeerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerMessage* New() const final {
    return CreateMaybeMessage<PeerMessage>(NULL);
  }

  PeerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerMessage& from);
  void MergeFrom(const PeerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bftmessages.Authenticator auth = 6;
  int auth_size() const;
  void clear_auth();
  static const int kAuthFieldNumber = 6;
  ::bftmessages::Authenticator* mutable_auth(int index);
  ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >*
      mutable_auth();
  const ::bftmessages::Authenticator& auth(int index) const;
  ::bftmessages::Authenticator* add_auth();
  const ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >&
      auth() const;

  // bytes attachedData = 5;
  void clear_attacheddata();
  static const int kAttachedDataFieldNumber = 5;
  const ::std::string& attacheddata() const;
  void set_attacheddata(const ::std::string& value);
  #if LANG_CXX11
  void set_attacheddata(::std::string&& value);
  #endif
  void set_attacheddata(const char* value);
  void set_attacheddata(const void* value, size_t size);
  ::std::string* mutable_attacheddata();
  ::std::string* release_attacheddata();
  void set_allocated_attacheddata(::std::string* attacheddata);

  // int32 fromNodeId = 1;
  void clear_fromnodeid();
  static const int kFromNodeIdFieldNumber = 1;
  ::google::protobuf::int32 fromnodeid() const;
  void set_fromnodeid(::google::protobuf::int32 value);

  // int32 msgId = 2;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // int32 epochId = 3;
  void clear_epochid();
  static const int kEpochIdFieldNumber = 3;
  ::google::protobuf::int32 epochid() const;
  void set_epochid(::google::protobuf::int32 value);

  // .bftmessages.MsgType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::bftmessages::MsgType type() const;
  void set_type(::bftmessages::MsgType value);

  // @@protoc_insertion_point(class_scope:bftmessages.PeerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator > auth_;
  ::google::protobuf::internal::ArenaStringPtr attacheddata_;
  ::google::protobuf::int32 fromnodeid_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 epochid_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertificateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.CertificateMessage) */ {
 public:
  CertificateMessage();
  virtual ~CertificateMessage();

  CertificateMessage(const CertificateMessage& from);

  inline CertificateMessage& operator=(const CertificateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CertificateMessage(CertificateMessage&& from) noexcept
    : CertificateMessage() {
    *this = ::std::move(from);
  }

  inline CertificateMessage& operator=(CertificateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CertificateMessage* internal_default_instance() {
    return reinterpret_cast<const CertificateMessage*>(
               &_CertificateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CertificateMessage* other);
  friend void swap(CertificateMessage& a, CertificateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CertificateMessage* New() const final {
    return CreateMaybeMessage<CertificateMessage>(NULL);
  }

  CertificateMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CertificateMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CertificateMessage& from);
  void MergeFrom(const CertificateMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertificateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bftmessages.PeerMessage certificates = 3;
  int certificates_size() const;
  void clear_certificates();
  static const int kCertificatesFieldNumber = 3;
  ::bftmessages::PeerMessage* mutable_certificates(int index);
  ::google::protobuf::RepeatedPtrField< ::bftmessages::PeerMessage >*
      mutable_certificates();
  const ::bftmessages::PeerMessage& certificates(int index) const;
  ::bftmessages::PeerMessage* add_certificates();
  const ::google::protobuf::RepeatedPtrField< ::bftmessages::PeerMessage >&
      certificates() const;

  // bool initialized = 1;
  void clear_initialized();
  static const int kInitializedFieldNumber = 1;
  bool initialized() const;
  void set_initialized(bool value);

  // int32 cntPrepared = 2;
  void clear_cntprepared();
  static const int kCntPreparedFieldNumber = 2;
  ::google::protobuf::int32 cntprepared() const;
  void set_cntprepared(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftmessages.CertificateMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bftmessages::PeerMessage > certificates_;
  bool initialized_;
  ::google::protobuf::int32 cntprepared_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PayloadNewConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.PayloadNewConfig) */ {
 public:
  PayloadNewConfig();
  virtual ~PayloadNewConfig();

  PayloadNewConfig(const PayloadNewConfig& from);

  inline PayloadNewConfig& operator=(const PayloadNewConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayloadNewConfig(PayloadNewConfig&& from) noexcept
    : PayloadNewConfig() {
    *this = ::std::move(from);
  }

  inline PayloadNewConfig& operator=(PayloadNewConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadNewConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayloadNewConfig* internal_default_instance() {
    return reinterpret_cast<const PayloadNewConfig*>(
               &_PayloadNewConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PayloadNewConfig* other);
  friend void swap(PayloadNewConfig& a, PayloadNewConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayloadNewConfig* New() const final {
    return CreateMaybeMessage<PayloadNewConfig>(NULL);
  }

  PayloadNewConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PayloadNewConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PayloadNewConfig& from);
  void MergeFrom(const PayloadNewConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadNewConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  ::google::protobuf::int32 members(int index) const;
  void set_members(int index, ::google::protobuf::int32 value);
  void add_members(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      members() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_members();

  // bytes digestState = 3;
  void clear_digeststate();
  static const int kDigestStateFieldNumber = 3;
  const ::std::string& digeststate() const;
  void set_digeststate(const ::std::string& value);
  #if LANG_CXX11
  void set_digeststate(::std::string&& value);
  #endif
  void set_digeststate(const char* value);
  void set_digeststate(const void* value, size_t size);
  ::std::string* mutable_digeststate();
  ::std::string* release_digeststate();
  void set_allocated_digeststate(::std::string* digeststate);

  // bytes digestP = 4;
  void clear_digestp();
  static const int kDigestPFieldNumber = 4;
  const ::std::string& digestp() const;
  void set_digestp(const ::std::string& value);
  #if LANG_CXX11
  void set_digestp(::std::string&& value);
  #endif
  void set_digestp(const char* value);
  void set_digestp(const void* value, size_t size);
  ::std::string* mutable_digestp();
  ::std::string* release_digestp();
  void set_allocated_digestp(::std::string* digestp);

  // int32 leader = 2;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  ::google::protobuf::int32 leader() const;
  void set_leader(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftmessages.PayloadNewConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > members_;
  mutable int _members_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr digeststate_;
  ::google::protobuf::internal::ArenaStringPtr digestp_;
  ::google::protobuf::int32 leader_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PayloadSyncState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.PayloadSyncState) */ {
 public:
  PayloadSyncState();
  virtual ~PayloadSyncState();

  PayloadSyncState(const PayloadSyncState& from);

  inline PayloadSyncState& operator=(const PayloadSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayloadSyncState(PayloadSyncState&& from) noexcept
    : PayloadSyncState() {
    *this = ::std::move(from);
  }

  inline PayloadSyncState& operator=(PayloadSyncState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadSyncState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayloadSyncState* internal_default_instance() {
    return reinterpret_cast<const PayloadSyncState*>(
               &_PayloadSyncState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PayloadSyncState* other);
  friend void swap(PayloadSyncState& a, PayloadSyncState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayloadSyncState* New() const final {
    return CreateMaybeMessage<PayloadSyncState>(NULL);
  }

  PayloadSyncState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PayloadSyncState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PayloadSyncState& from);
  void MergeFrom(const PayloadSyncState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadSyncState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 clients = 1;
  int clients_size() const;
  void clear_clients();
  static const int kClientsFieldNumber = 1;
  ::google::protobuf::int32 clients(int index) const;
  void set_clients(int index, ::google::protobuf::int32 value);
  void add_clients(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      clients() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_clients();

  // .bftmessages.CertificateMessage certificate = 2;
  bool has_certificate() const;
  void clear_certificate();
  static const int kCertificateFieldNumber = 2;
  private:
  const ::bftmessages::CertificateMessage& _internal_certificate() const;
  public:
  const ::bftmessages::CertificateMessage& certificate() const;
  ::bftmessages::CertificateMessage* release_certificate();
  ::bftmessages::CertificateMessage* mutable_certificate();
  void set_allocated_certificate(::bftmessages::CertificateMessage* certificate);

  // .bftmessages.PeerMessage newConfigMessage = 3;
  bool has_newconfigmessage() const;
  void clear_newconfigmessage();
  static const int kNewConfigMessageFieldNumber = 3;
  private:
  const ::bftmessages::PeerMessage& _internal_newconfigmessage() const;
  public:
  const ::bftmessages::PeerMessage& newconfigmessage() const;
  ::bftmessages::PeerMessage* release_newconfigmessage();
  ::bftmessages::PeerMessage* mutable_newconfigmessage();
  void set_allocated_newconfigmessage(::bftmessages::PeerMessage* newconfigmessage);

  // @@protoc_insertion_point(class_scope:bftmessages.PayloadSyncState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > clients_;
  mutable int _clients_cached_byte_size_;
  ::bftmessages::CertificateMessage* certificate_;
  ::bftmessages::PeerMessage* newconfigmessage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.ConfigMessage) */ {
 public:
  ConfigMessage();
  virtual ~ConfigMessage();

  ConfigMessage(const ConfigMessage& from);

  inline ConfigMessage& operator=(const ConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMessage(ConfigMessage&& from) noexcept
    : ConfigMessage() {
    *this = ::std::move(from);
  }

  inline ConfigMessage& operator=(ConfigMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMessage* internal_default_instance() {
    return reinterpret_cast<const ConfigMessage*>(
               &_ConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConfigMessage* other);
  friend void swap(ConfigMessage& a, ConfigMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMessage* New() const final {
    return CreateMaybeMessage<ConfigMessage>(NULL);
  }

  ConfigMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMessage& from);
  void MergeFrom(const ConfigMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 roles = 3;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 3;
  ::google::protobuf::int32 roles(int index) const;
  void set_roles(int index, ::google::protobuf::int32 value);
  void add_roles(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roles() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roles();

  // repeated string addresses = 4;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 4;
  const ::std::string& addresses(int index) const;
  ::std::string* mutable_addresses(int index);
  void set_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_addresses(int index, ::std::string&& value);
  #endif
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  ::std::string* add_addresses();
  void add_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_addresses(::std::string&& value);
  #endif
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& addresses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_addresses();

  // repeated int32 basePorts = 5;
  int baseports_size() const;
  void clear_baseports();
  static const int kBasePortsFieldNumber = 5;
  ::google::protobuf::int32 baseports(int index) const;
  void set_baseports(int index, ::google::protobuf::int32 value);
  void add_baseports(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      baseports() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_baseports();

  // string hashAlg = 10;
  void clear_hashalg();
  static const int kHashAlgFieldNumber = 10;
  const ::std::string& hashalg() const;
  void set_hashalg(const ::std::string& value);
  #if LANG_CXX11
  void set_hashalg(::std::string&& value);
  #endif
  void set_hashalg(const char* value);
  void set_hashalg(const char* value, size_t size);
  ::std::string* mutable_hashalg();
  ::std::string* release_hashalg();
  void set_allocated_hashalg(::std::string* hashalg);

  // string signAlg = 11;
  void clear_signalg();
  static const int kSignAlgFieldNumber = 11;
  const ::std::string& signalg() const;
  void set_signalg(const ::std::string& value);
  #if LANG_CXX11
  void set_signalg(::std::string&& value);
  #endif
  void set_signalg(const char* value);
  void set_signalg(const char* value, size_t size);
  ::std::string* mutable_signalg();
  ::std::string* release_signalg();
  void set_allocated_signalg(::std::string* signalg);

  // int32 basePort = 1;
  void clear_baseport();
  static const int kBasePortFieldNumber = 1;
  ::google::protobuf::int32 baseport() const;
  void set_baseport(::google::protobuf::int32 value);

  // int32 nodeCount = 2;
  void clear_nodecount();
  static const int kNodeCountFieldNumber = 2;
  ::google::protobuf::int32 nodecount() const;
  void set_nodecount(::google::protobuf::int32 value);

  // bool outgoingDoHash = 6;
  void clear_outgoingdohash();
  static const int kOutgoingDoHashFieldNumber = 6;
  bool outgoingdohash() const;
  void set_outgoingdohash(bool value);

  // bool outgoingDoSign = 7;
  void clear_outgoingdosign();
  static const int kOutgoingDoSignFieldNumber = 7;
  bool outgoingdosign() const;
  void set_outgoingdosign(bool value);

  // bool incomingDoHash = 8;
  void clear_incomingdohash();
  static const int kIncomingDoHashFieldNumber = 8;
  bool incomingdohash() const;
  void set_incomingdohash(bool value);

  // bool incomingVerifySign = 9;
  void clear_incomingverifysign();
  static const int kIncomingVerifySignFieldNumber = 9;
  bool incomingverifysign() const;
  void set_incomingverifysign(bool value);

  // @@protoc_insertion_point(class_scope:bftmessages.ConfigMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roles_;
  mutable int _roles_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> addresses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > baseports_;
  mutable int _baseports_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr hashalg_;
  ::google::protobuf::internal::ArenaStringPtr signalg_;
  ::google::protobuf::int32 baseport_;
  ::google::protobuf::int32 nodecount_;
  bool outgoingdohash_;
  bool outgoingdosign_;
  bool incomingdohash_;
  bool incomingverifysign_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.SendMessage) */ {
 public:
  SendMessage();
  virtual ~SendMessage();

  SendMessage(const SendMessage& from);

  inline SendMessage& operator=(const SendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMessage(SendMessage&& from) noexcept
    : SendMessage() {
    *this = ::std::move(from);
  }

  inline SendMessage& operator=(SendMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessage* internal_default_instance() {
    return reinterpret_cast<const SendMessage*>(
               &_SendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SendMessage* other);
  friend void swap(SendMessage& a, SendMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMessage* New() const final {
    return CreateMaybeMessage<SendMessage>(NULL);
  }

  SendMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendMessage& from);
  void MergeFrom(const SendMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 nodeId = 1;
  int nodeid_size() const;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 nodeid(int index) const;
  void set_nodeid(int index, ::google::protobuf::int32 value);
  void add_nodeid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodeid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodeid();

  // repeated .bftmessages.Authenticator signs = 4;
  int signs_size() const;
  void clear_signs();
  static const int kSignsFieldNumber = 4;
  ::bftmessages::Authenticator* mutable_signs(int index);
  ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >*
      mutable_signs();
  const ::bftmessages::Authenticator& signs(int index) const;
  ::bftmessages::Authenticator* add_signs();
  const ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >&
      signs() const;

  // bytes hash = 3;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // .bftmessages.PeerMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  private:
  const ::bftmessages::PeerMessage& _internal_message() const;
  public:
  const ::bftmessages::PeerMessage& message() const;
  ::bftmessages::PeerMessage* release_message();
  ::bftmessages::PeerMessage* mutable_message();
  void set_allocated_message(::bftmessages::PeerMessage* message);

  // @@protoc_insertion_point(class_scope:bftmessages.SendMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodeid_;
  mutable int _nodeid_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator > signs_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::bftmessages::PeerMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReceivedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bftmessages.ReceivedMessage) */ {
 public:
  ReceivedMessage();
  virtual ~ReceivedMessage();

  ReceivedMessage(const ReceivedMessage& from);

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReceivedMessage* other);
  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessage* New() const final {
    return CreateMaybeMessage<ReceivedMessage>(NULL);
  }

  ReceivedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReceivedMessage& from);
  void MergeFrom(const ReceivedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .bftmessages.ReceivedChannel channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::bftmessages::ReceivedChannel channel() const;
  void set_channel(::bftmessages::ReceivedChannel value);

  // @@protoc_insertion_point(class_scope:bftmessages.ReceivedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerMessage

// int32 fromNodeId = 1;
inline void PeerMessage::clear_fromnodeid() {
  fromnodeid_ = 0;
}
inline ::google::protobuf::int32 PeerMessage::fromnodeid() const {
  // @@protoc_insertion_point(field_get:bftmessages.PeerMessage.fromNodeId)
  return fromnodeid_;
}
inline void PeerMessage::set_fromnodeid(::google::protobuf::int32 value) {
  
  fromnodeid_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.PeerMessage.fromNodeId)
}

// int32 msgId = 2;
inline void PeerMessage::clear_msgid() {
  msgid_ = 0;
}
inline ::google::protobuf::int32 PeerMessage::msgid() const {
  // @@protoc_insertion_point(field_get:bftmessages.PeerMessage.msgId)
  return msgid_;
}
inline void PeerMessage::set_msgid(::google::protobuf::int32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.PeerMessage.msgId)
}

// int32 epochId = 3;
inline void PeerMessage::clear_epochid() {
  epochid_ = 0;
}
inline ::google::protobuf::int32 PeerMessage::epochid() const {
  // @@protoc_insertion_point(field_get:bftmessages.PeerMessage.epochId)
  return epochid_;
}
inline void PeerMessage::set_epochid(::google::protobuf::int32 value) {
  
  epochid_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.PeerMessage.epochId)
}

// .bftmessages.MsgType type = 4;
inline void PeerMessage::clear_type() {
  type_ = 0;
}
inline ::bftmessages::MsgType PeerMessage::type() const {
  // @@protoc_insertion_point(field_get:bftmessages.PeerMessage.type)
  return static_cast< ::bftmessages::MsgType >(type_);
}
inline void PeerMessage::set_type(::bftmessages::MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.PeerMessage.type)
}

// bytes attachedData = 5;
inline void PeerMessage::clear_attacheddata() {
  attacheddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerMessage::attacheddata() const {
  // @@protoc_insertion_point(field_get:bftmessages.PeerMessage.attachedData)
  return attacheddata_.GetNoArena();
}
inline void PeerMessage::set_attacheddata(const ::std::string& value) {
  
  attacheddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.PeerMessage.attachedData)
}
#if LANG_CXX11
inline void PeerMessage::set_attacheddata(::std::string&& value) {
  
  attacheddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.PeerMessage.attachedData)
}
#endif
inline void PeerMessage::set_attacheddata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attacheddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.PeerMessage.attachedData)
}
inline void PeerMessage::set_attacheddata(const void* value, size_t size) {
  
  attacheddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.PeerMessage.attachedData)
}
inline ::std::string* PeerMessage::mutable_attacheddata() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.PeerMessage.attachedData)
  return attacheddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerMessage::release_attacheddata() {
  // @@protoc_insertion_point(field_release:bftmessages.PeerMessage.attachedData)
  
  return attacheddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerMessage::set_allocated_attacheddata(::std::string* attacheddata) {
  if (attacheddata != NULL) {
    
  } else {
    
  }
  attacheddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attacheddata);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.PeerMessage.attachedData)
}

// repeated .bftmessages.Authenticator auth = 6;
inline int PeerMessage::auth_size() const {
  return auth_.size();
}
inline ::bftmessages::Authenticator* PeerMessage::mutable_auth(int index) {
  // @@protoc_insertion_point(field_mutable:bftmessages.PeerMessage.auth)
  return auth_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >*
PeerMessage::mutable_auth() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.PeerMessage.auth)
  return &auth_;
}
inline const ::bftmessages::Authenticator& PeerMessage::auth(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.PeerMessage.auth)
  return auth_.Get(index);
}
inline ::bftmessages::Authenticator* PeerMessage::add_auth() {
  // @@protoc_insertion_point(field_add:bftmessages.PeerMessage.auth)
  return auth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >&
PeerMessage::auth() const {
  // @@protoc_insertion_point(field_list:bftmessages.PeerMessage.auth)
  return auth_;
}

// -------------------------------------------------------------------

// CertificateMessage

// bool initialized = 1;
inline void CertificateMessage::clear_initialized() {
  initialized_ = false;
}
inline bool CertificateMessage::initialized() const {
  // @@protoc_insertion_point(field_get:bftmessages.CertificateMessage.initialized)
  return initialized_;
}
inline void CertificateMessage::set_initialized(bool value) {
  
  initialized_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.CertificateMessage.initialized)
}

// int32 cntPrepared = 2;
inline void CertificateMessage::clear_cntprepared() {
  cntprepared_ = 0;
}
inline ::google::protobuf::int32 CertificateMessage::cntprepared() const {
  // @@protoc_insertion_point(field_get:bftmessages.CertificateMessage.cntPrepared)
  return cntprepared_;
}
inline void CertificateMessage::set_cntprepared(::google::protobuf::int32 value) {
  
  cntprepared_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.CertificateMessage.cntPrepared)
}

// repeated .bftmessages.PeerMessage certificates = 3;
inline int CertificateMessage::certificates_size() const {
  return certificates_.size();
}
inline void CertificateMessage::clear_certificates() {
  certificates_.Clear();
}
inline ::bftmessages::PeerMessage* CertificateMessage::mutable_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:bftmessages.CertificateMessage.certificates)
  return certificates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bftmessages::PeerMessage >*
CertificateMessage::mutable_certificates() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.CertificateMessage.certificates)
  return &certificates_;
}
inline const ::bftmessages::PeerMessage& CertificateMessage::certificates(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.CertificateMessage.certificates)
  return certificates_.Get(index);
}
inline ::bftmessages::PeerMessage* CertificateMessage::add_certificates() {
  // @@protoc_insertion_point(field_add:bftmessages.CertificateMessage.certificates)
  return certificates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bftmessages::PeerMessage >&
CertificateMessage::certificates() const {
  // @@protoc_insertion_point(field_list:bftmessages.CertificateMessage.certificates)
  return certificates_;
}

// -------------------------------------------------------------------

// PayloadNewConfig

// repeated int32 members = 1;
inline int PayloadNewConfig::members_size() const {
  return members_.size();
}
inline void PayloadNewConfig::clear_members() {
  members_.Clear();
}
inline ::google::protobuf::int32 PayloadNewConfig::members(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.PayloadNewConfig.members)
  return members_.Get(index);
}
inline void PayloadNewConfig::set_members(int index, ::google::protobuf::int32 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:bftmessages.PayloadNewConfig.members)
}
inline void PayloadNewConfig::add_members(::google::protobuf::int32 value) {
  members_.Add(value);
  // @@protoc_insertion_point(field_add:bftmessages.PayloadNewConfig.members)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PayloadNewConfig::members() const {
  // @@protoc_insertion_point(field_list:bftmessages.PayloadNewConfig.members)
  return members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PayloadNewConfig::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.PayloadNewConfig.members)
  return &members_;
}

// int32 leader = 2;
inline void PayloadNewConfig::clear_leader() {
  leader_ = 0;
}
inline ::google::protobuf::int32 PayloadNewConfig::leader() const {
  // @@protoc_insertion_point(field_get:bftmessages.PayloadNewConfig.leader)
  return leader_;
}
inline void PayloadNewConfig::set_leader(::google::protobuf::int32 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.PayloadNewConfig.leader)
}

// bytes digestState = 3;
inline void PayloadNewConfig::clear_digeststate() {
  digeststate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadNewConfig::digeststate() const {
  // @@protoc_insertion_point(field_get:bftmessages.PayloadNewConfig.digestState)
  return digeststate_.GetNoArena();
}
inline void PayloadNewConfig::set_digeststate(const ::std::string& value) {
  
  digeststate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.PayloadNewConfig.digestState)
}
#if LANG_CXX11
inline void PayloadNewConfig::set_digeststate(::std::string&& value) {
  
  digeststate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.PayloadNewConfig.digestState)
}
#endif
inline void PayloadNewConfig::set_digeststate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  digeststate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.PayloadNewConfig.digestState)
}
inline void PayloadNewConfig::set_digeststate(const void* value, size_t size) {
  
  digeststate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.PayloadNewConfig.digestState)
}
inline ::std::string* PayloadNewConfig::mutable_digeststate() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.PayloadNewConfig.digestState)
  return digeststate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadNewConfig::release_digeststate() {
  // @@protoc_insertion_point(field_release:bftmessages.PayloadNewConfig.digestState)
  
  return digeststate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadNewConfig::set_allocated_digeststate(::std::string* digeststate) {
  if (digeststate != NULL) {
    
  } else {
    
  }
  digeststate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digeststate);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.PayloadNewConfig.digestState)
}

// bytes digestP = 4;
inline void PayloadNewConfig::clear_digestp() {
  digestp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadNewConfig::digestp() const {
  // @@protoc_insertion_point(field_get:bftmessages.PayloadNewConfig.digestP)
  return digestp_.GetNoArena();
}
inline void PayloadNewConfig::set_digestp(const ::std::string& value) {
  
  digestp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.PayloadNewConfig.digestP)
}
#if LANG_CXX11
inline void PayloadNewConfig::set_digestp(::std::string&& value) {
  
  digestp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.PayloadNewConfig.digestP)
}
#endif
inline void PayloadNewConfig::set_digestp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  digestp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.PayloadNewConfig.digestP)
}
inline void PayloadNewConfig::set_digestp(const void* value, size_t size) {
  
  digestp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.PayloadNewConfig.digestP)
}
inline ::std::string* PayloadNewConfig::mutable_digestp() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.PayloadNewConfig.digestP)
  return digestp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadNewConfig::release_digestp() {
  // @@protoc_insertion_point(field_release:bftmessages.PayloadNewConfig.digestP)
  
  return digestp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadNewConfig::set_allocated_digestp(::std::string* digestp) {
  if (digestp != NULL) {
    
  } else {
    
  }
  digestp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digestp);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.PayloadNewConfig.digestP)
}

// -------------------------------------------------------------------

// PayloadSyncState

// repeated int32 clients = 1;
inline int PayloadSyncState::clients_size() const {
  return clients_.size();
}
inline void PayloadSyncState::clear_clients() {
  clients_.Clear();
}
inline ::google::protobuf::int32 PayloadSyncState::clients(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.PayloadSyncState.clients)
  return clients_.Get(index);
}
inline void PayloadSyncState::set_clients(int index, ::google::protobuf::int32 value) {
  clients_.Set(index, value);
  // @@protoc_insertion_point(field_set:bftmessages.PayloadSyncState.clients)
}
inline void PayloadSyncState::add_clients(::google::protobuf::int32 value) {
  clients_.Add(value);
  // @@protoc_insertion_point(field_add:bftmessages.PayloadSyncState.clients)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PayloadSyncState::clients() const {
  // @@protoc_insertion_point(field_list:bftmessages.PayloadSyncState.clients)
  return clients_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PayloadSyncState::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.PayloadSyncState.clients)
  return &clients_;
}

// .bftmessages.CertificateMessage certificate = 2;
inline bool PayloadSyncState::has_certificate() const {
  return this != internal_default_instance() && certificate_ != NULL;
}
inline void PayloadSyncState::clear_certificate() {
  if (GetArenaNoVirtual() == NULL && certificate_ != NULL) {
    delete certificate_;
  }
  certificate_ = NULL;
}
inline const ::bftmessages::CertificateMessage& PayloadSyncState::_internal_certificate() const {
  return *certificate_;
}
inline const ::bftmessages::CertificateMessage& PayloadSyncState::certificate() const {
  const ::bftmessages::CertificateMessage* p = certificate_;
  // @@protoc_insertion_point(field_get:bftmessages.PayloadSyncState.certificate)
  return p != NULL ? *p : *reinterpret_cast<const ::bftmessages::CertificateMessage*>(
      &::bftmessages::_CertificateMessage_default_instance_);
}
inline ::bftmessages::CertificateMessage* PayloadSyncState::release_certificate() {
  // @@protoc_insertion_point(field_release:bftmessages.PayloadSyncState.certificate)
  
  ::bftmessages::CertificateMessage* temp = certificate_;
  certificate_ = NULL;
  return temp;
}
inline ::bftmessages::CertificateMessage* PayloadSyncState::mutable_certificate() {
  
  if (certificate_ == NULL) {
    auto* p = CreateMaybeMessage<::bftmessages::CertificateMessage>(GetArenaNoVirtual());
    certificate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bftmessages.PayloadSyncState.certificate)
  return certificate_;
}
inline void PayloadSyncState::set_allocated_certificate(::bftmessages::CertificateMessage* certificate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete certificate_;
  }
  if (certificate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      certificate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, certificate, submessage_arena);
    }
    
  } else {
    
  }
  certificate_ = certificate;
  // @@protoc_insertion_point(field_set_allocated:bftmessages.PayloadSyncState.certificate)
}

// .bftmessages.PeerMessage newConfigMessage = 3;
inline bool PayloadSyncState::has_newconfigmessage() const {
  return this != internal_default_instance() && newconfigmessage_ != NULL;
}
inline void PayloadSyncState::clear_newconfigmessage() {
  if (GetArenaNoVirtual() == NULL && newconfigmessage_ != NULL) {
    delete newconfigmessage_;
  }
  newconfigmessage_ = NULL;
}
inline const ::bftmessages::PeerMessage& PayloadSyncState::_internal_newconfigmessage() const {
  return *newconfigmessage_;
}
inline const ::bftmessages::PeerMessage& PayloadSyncState::newconfigmessage() const {
  const ::bftmessages::PeerMessage* p = newconfigmessage_;
  // @@protoc_insertion_point(field_get:bftmessages.PayloadSyncState.newConfigMessage)
  return p != NULL ? *p : *reinterpret_cast<const ::bftmessages::PeerMessage*>(
      &::bftmessages::_PeerMessage_default_instance_);
}
inline ::bftmessages::PeerMessage* PayloadSyncState::release_newconfigmessage() {
  // @@protoc_insertion_point(field_release:bftmessages.PayloadSyncState.newConfigMessage)
  
  ::bftmessages::PeerMessage* temp = newconfigmessage_;
  newconfigmessage_ = NULL;
  return temp;
}
inline ::bftmessages::PeerMessage* PayloadSyncState::mutable_newconfigmessage() {
  
  if (newconfigmessage_ == NULL) {
    auto* p = CreateMaybeMessage<::bftmessages::PeerMessage>(GetArenaNoVirtual());
    newconfigmessage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bftmessages.PayloadSyncState.newConfigMessage)
  return newconfigmessage_;
}
inline void PayloadSyncState::set_allocated_newconfigmessage(::bftmessages::PeerMessage* newconfigmessage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete newconfigmessage_;
  }
  if (newconfigmessage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      newconfigmessage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newconfigmessage, submessage_arena);
    }
    
  } else {
    
  }
  newconfigmessage_ = newconfigmessage;
  // @@protoc_insertion_point(field_set_allocated:bftmessages.PayloadSyncState.newConfigMessage)
}

// -------------------------------------------------------------------

// ConfigMessage

// int32 basePort = 1;
inline void ConfigMessage::clear_baseport() {
  baseport_ = 0;
}
inline ::google::protobuf::int32 ConfigMessage::baseport() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.basePort)
  return baseport_;
}
inline void ConfigMessage::set_baseport(::google::protobuf::int32 value) {
  
  baseport_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.basePort)
}

// int32 nodeCount = 2;
inline void ConfigMessage::clear_nodecount() {
  nodecount_ = 0;
}
inline ::google::protobuf::int32 ConfigMessage::nodecount() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.nodeCount)
  return nodecount_;
}
inline void ConfigMessage::set_nodecount(::google::protobuf::int32 value) {
  
  nodecount_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.nodeCount)
}

// repeated int32 roles = 3;
inline int ConfigMessage::roles_size() const {
  return roles_.size();
}
inline void ConfigMessage::clear_roles() {
  roles_.Clear();
}
inline ::google::protobuf::int32 ConfigMessage::roles(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.roles)
  return roles_.Get(index);
}
inline void ConfigMessage::set_roles(int index, ::google::protobuf::int32 value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.roles)
}
inline void ConfigMessage::add_roles(::google::protobuf::int32 value) {
  roles_.Add(value);
  // @@protoc_insertion_point(field_add:bftmessages.ConfigMessage.roles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConfigMessage::roles() const {
  // @@protoc_insertion_point(field_list:bftmessages.ConfigMessage.roles)
  return roles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConfigMessage::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.ConfigMessage.roles)
  return &roles_;
}

// repeated string addresses = 4;
inline int ConfigMessage::addresses_size() const {
  return addresses_.size();
}
inline void ConfigMessage::clear_addresses() {
  addresses_.Clear();
}
inline const ::std::string& ConfigMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.addresses)
  return addresses_.Get(index);
}
inline ::std::string* ConfigMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:bftmessages.ConfigMessage.addresses)
  return addresses_.Mutable(index);
}
inline void ConfigMessage::set_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.addresses)
  addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ConfigMessage::set_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ConfigMessage::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bftmessages.ConfigMessage.addresses)
}
inline void ConfigMessage::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bftmessages.ConfigMessage.addresses)
}
inline ::std::string* ConfigMessage::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:bftmessages.ConfigMessage.addresses)
  return addresses_.Add();
}
inline void ConfigMessage::add_addresses(const ::std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bftmessages.ConfigMessage.addresses)
}
#if LANG_CXX11
inline void ConfigMessage::add_addresses(::std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bftmessages.ConfigMessage.addresses)
}
#endif
inline void ConfigMessage::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bftmessages.ConfigMessage.addresses)
}
inline void ConfigMessage::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bftmessages.ConfigMessage.addresses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConfigMessage::addresses() const {
  // @@protoc_insertion_point(field_list:bftmessages.ConfigMessage.addresses)
  return addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConfigMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.ConfigMessage.addresses)
  return &addresses_;
}

// repeated int32 basePorts = 5;
inline int ConfigMessage::baseports_size() const {
  return baseports_.size();
}
inline void ConfigMessage::clear_baseports() {
  baseports_.Clear();
}
inline ::google::protobuf::int32 ConfigMessage::baseports(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.basePorts)
  return baseports_.Get(index);
}
inline void ConfigMessage::set_baseports(int index, ::google::protobuf::int32 value) {
  baseports_.Set(index, value);
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.basePorts)
}
inline void ConfigMessage::add_baseports(::google::protobuf::int32 value) {
  baseports_.Add(value);
  // @@protoc_insertion_point(field_add:bftmessages.ConfigMessage.basePorts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConfigMessage::baseports() const {
  // @@protoc_insertion_point(field_list:bftmessages.ConfigMessage.basePorts)
  return baseports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConfigMessage::mutable_baseports() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.ConfigMessage.basePorts)
  return &baseports_;
}

// bool outgoingDoHash = 6;
inline void ConfigMessage::clear_outgoingdohash() {
  outgoingdohash_ = false;
}
inline bool ConfigMessage::outgoingdohash() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.outgoingDoHash)
  return outgoingdohash_;
}
inline void ConfigMessage::set_outgoingdohash(bool value) {
  
  outgoingdohash_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.outgoingDoHash)
}

// bool outgoingDoSign = 7;
inline void ConfigMessage::clear_outgoingdosign() {
  outgoingdosign_ = false;
}
inline bool ConfigMessage::outgoingdosign() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.outgoingDoSign)
  return outgoingdosign_;
}
inline void ConfigMessage::set_outgoingdosign(bool value) {
  
  outgoingdosign_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.outgoingDoSign)
}

// bool incomingDoHash = 8;
inline void ConfigMessage::clear_incomingdohash() {
  incomingdohash_ = false;
}
inline bool ConfigMessage::incomingdohash() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.incomingDoHash)
  return incomingdohash_;
}
inline void ConfigMessage::set_incomingdohash(bool value) {
  
  incomingdohash_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.incomingDoHash)
}

// bool incomingVerifySign = 9;
inline void ConfigMessage::clear_incomingverifysign() {
  incomingverifysign_ = false;
}
inline bool ConfigMessage::incomingverifysign() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.incomingVerifySign)
  return incomingverifysign_;
}
inline void ConfigMessage::set_incomingverifysign(bool value) {
  
  incomingverifysign_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.incomingVerifySign)
}

// string hashAlg = 10;
inline void ConfigMessage::clear_hashalg() {
  hashalg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigMessage::hashalg() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.hashAlg)
  return hashalg_.GetNoArena();
}
inline void ConfigMessage::set_hashalg(const ::std::string& value) {
  
  hashalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.hashAlg)
}
#if LANG_CXX11
inline void ConfigMessage::set_hashalg(::std::string&& value) {
  
  hashalg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.ConfigMessage.hashAlg)
}
#endif
inline void ConfigMessage::set_hashalg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.ConfigMessage.hashAlg)
}
inline void ConfigMessage::set_hashalg(const char* value, size_t size) {
  
  hashalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.ConfigMessage.hashAlg)
}
inline ::std::string* ConfigMessage::mutable_hashalg() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.ConfigMessage.hashAlg)
  return hashalg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigMessage::release_hashalg() {
  // @@protoc_insertion_point(field_release:bftmessages.ConfigMessage.hashAlg)
  
  return hashalg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigMessage::set_allocated_hashalg(::std::string* hashalg) {
  if (hashalg != NULL) {
    
  } else {
    
  }
  hashalg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashalg);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.ConfigMessage.hashAlg)
}

// string signAlg = 11;
inline void ConfigMessage::clear_signalg() {
  signalg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigMessage::signalg() const {
  // @@protoc_insertion_point(field_get:bftmessages.ConfigMessage.signAlg)
  return signalg_.GetNoArena();
}
inline void ConfigMessage::set_signalg(const ::std::string& value) {
  
  signalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.ConfigMessage.signAlg)
}
#if LANG_CXX11
inline void ConfigMessage::set_signalg(::std::string&& value) {
  
  signalg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.ConfigMessage.signAlg)
}
#endif
inline void ConfigMessage::set_signalg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.ConfigMessage.signAlg)
}
inline void ConfigMessage::set_signalg(const char* value, size_t size) {
  
  signalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.ConfigMessage.signAlg)
}
inline ::std::string* ConfigMessage::mutable_signalg() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.ConfigMessage.signAlg)
  return signalg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigMessage::release_signalg() {
  // @@protoc_insertion_point(field_release:bftmessages.ConfigMessage.signAlg)
  
  return signalg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigMessage::set_allocated_signalg(::std::string* signalg) {
  if (signalg != NULL) {
    
  } else {
    
  }
  signalg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signalg);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.ConfigMessage.signAlg)
}

// -------------------------------------------------------------------

// SendMessage

// repeated int32 nodeId = 1;
inline int SendMessage::nodeid_size() const {
  return nodeid_.size();
}
inline void SendMessage::clear_nodeid() {
  nodeid_.Clear();
}
inline ::google::protobuf::int32 SendMessage::nodeid(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.SendMessage.nodeId)
  return nodeid_.Get(index);
}
inline void SendMessage::set_nodeid(int index, ::google::protobuf::int32 value) {
  nodeid_.Set(index, value);
  // @@protoc_insertion_point(field_set:bftmessages.SendMessage.nodeId)
}
inline void SendMessage::add_nodeid(::google::protobuf::int32 value) {
  nodeid_.Add(value);
  // @@protoc_insertion_point(field_add:bftmessages.SendMessage.nodeId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendMessage::nodeid() const {
  // @@protoc_insertion_point(field_list:bftmessages.SendMessage.nodeId)
  return nodeid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendMessage::mutable_nodeid() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.SendMessage.nodeId)
  return &nodeid_;
}

// .bftmessages.PeerMessage message = 2;
inline bool SendMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void SendMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::bftmessages::PeerMessage& SendMessage::_internal_message() const {
  return *message_;
}
inline const ::bftmessages::PeerMessage& SendMessage::message() const {
  const ::bftmessages::PeerMessage* p = message_;
  // @@protoc_insertion_point(field_get:bftmessages.SendMessage.message)
  return p != NULL ? *p : *reinterpret_cast<const ::bftmessages::PeerMessage*>(
      &::bftmessages::_PeerMessage_default_instance_);
}
inline ::bftmessages::PeerMessage* SendMessage::release_message() {
  // @@protoc_insertion_point(field_release:bftmessages.SendMessage.message)
  
  ::bftmessages::PeerMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::bftmessages::PeerMessage* SendMessage::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::bftmessages::PeerMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bftmessages.SendMessage.message)
  return message_;
}
inline void SendMessage::set_allocated_message(::bftmessages::PeerMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bftmessages.SendMessage.message)
}

// bytes hash = 3;
inline void SendMessage::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMessage::hash() const {
  // @@protoc_insertion_point(field_get:bftmessages.SendMessage.hash)
  return hash_.GetNoArena();
}
inline void SendMessage::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.SendMessage.hash)
}
#if LANG_CXX11
inline void SendMessage::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.SendMessage.hash)
}
#endif
inline void SendMessage::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.SendMessage.hash)
}
inline void SendMessage::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.SendMessage.hash)
}
inline ::std::string* SendMessage::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.SendMessage.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessage::release_hash() {
  // @@protoc_insertion_point(field_release:bftmessages.SendMessage.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessage::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.SendMessage.hash)
}

// repeated .bftmessages.Authenticator signs = 4;
inline int SendMessage::signs_size() const {
  return signs_.size();
}
inline ::bftmessages::Authenticator* SendMessage::mutable_signs(int index) {
  // @@protoc_insertion_point(field_mutable:bftmessages.SendMessage.signs)
  return signs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >*
SendMessage::mutable_signs() {
  // @@protoc_insertion_point(field_mutable_list:bftmessages.SendMessage.signs)
  return &signs_;
}
inline const ::bftmessages::Authenticator& SendMessage::signs(int index) const {
  // @@protoc_insertion_point(field_get:bftmessages.SendMessage.signs)
  return signs_.Get(index);
}
inline ::bftmessages::Authenticator* SendMessage::add_signs() {
  // @@protoc_insertion_point(field_add:bftmessages.SendMessage.signs)
  return signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bftmessages::Authenticator >&
SendMessage::signs() const {
  // @@protoc_insertion_point(field_list:bftmessages.SendMessage.signs)
  return signs_;
}

// -------------------------------------------------------------------

// ReceivedMessage

// .bftmessages.ReceivedChannel channel = 1;
inline void ReceivedMessage::clear_channel() {
  channel_ = 0;
}
inline ::bftmessages::ReceivedChannel ReceivedMessage::channel() const {
  // @@protoc_insertion_point(field_get:bftmessages.ReceivedMessage.channel)
  return static_cast< ::bftmessages::ReceivedChannel >(channel_);
}
inline void ReceivedMessage::set_channel(::bftmessages::ReceivedChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:bftmessages.ReceivedMessage.channel)
}

// bytes message = 2;
inline void ReceivedMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceivedMessage::message() const {
  // @@protoc_insertion_point(field_get:bftmessages.ReceivedMessage.message)
  return message_.GetNoArena();
}
inline void ReceivedMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftmessages.ReceivedMessage.message)
}
#if LANG_CXX11
inline void ReceivedMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftmessages.ReceivedMessage.message)
}
#endif
inline void ReceivedMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftmessages.ReceivedMessage.message)
}
inline void ReceivedMessage::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftmessages.ReceivedMessage.message)
}
inline ::std::string* ReceivedMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:bftmessages.ReceivedMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceivedMessage::release_message() {
  // @@protoc_insertion_point(field_release:bftmessages.ReceivedMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivedMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:bftmessages.ReceivedMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bftmessages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bftmessages::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftmessages::MsgType>() {
  return ::bftmessages::MsgType_descriptor();
}
template <> struct is_proto_enum< ::bftmessages::ReceivedChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftmessages::ReceivedChannel>() {
  return ::bftmessages::ReceivedChannel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_peer_2eproto
